{"version":3,"sources":["logo.svg","Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","state","editing","task","toggleForm","bind","handleChange","handleUpdate","handleToggle","evt","this","toggleTodo","id","setState","e","preventDefault","updateTodo","target","name","value","className","onSubmit","type","onChange","completed","onClick","class","removeTodo","Component","NewTodoForm","handleSubmit","addTask","uuidv4","htmlFor","TodoList","tasks","update","toggleCompletion","filter","updatedTask","updatedTodos","map","todo","t","key","remove","renderList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,8MCkF5BC,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTC,KAAM,EAAKH,MAAMG,MAEnB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBATH,E,yDAYNI,GACXC,KAAKV,MAAMW,WAAWD,KAAKV,MAAMY,M,mCAIjCF,KAAKG,SAAS,CACZX,SAAUQ,KAAKT,MAAMC,Y,mCAIZY,GACXA,EAAEC,iBACFL,KAAKV,MAAMgB,WAAWN,KAAKV,MAAMY,GAAIF,KAAKT,MAAME,MAChDO,KAAKG,SAAS,CACZX,SAAS,M,mCAIAY,GACXJ,KAAKG,SAAL,eACGC,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,+BA0C5B,OApCIT,KAAKT,MAAMC,QAEX,yBAAKkB,UAAU,QACb,0BAAMA,UAAU,iBAAiBC,SAAUX,KAAKH,cAC9C,2BACEe,KAAK,OACLH,MAAOT,KAAKT,MAAME,KAClBe,KAAK,OACLK,SAAUb,KAAKJ,eAEjB,0CAMJ,yBAAKc,UAAU,QACb,wBACEA,UACEV,KAAKV,MAAMwB,UAAY,sBAAwB,YAEjDC,QAASf,KAAKF,cAEbE,KAAKV,MAAMG,MAEd,yBAAKiB,UAAU,gBACb,4BAAQK,QAASf,KAAKN,YACpB,uBAAGsB,MAAM,gBACD,IACV,4BAAQD,QAASf,KAAKV,MAAM2B,YAC1B,uBAAGD,MAAM,wB,GArEJE,c,uBCuCJC,G,wDArCb,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEE,KAAM,IACrB,EAAK2B,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,yDAONI,GACXA,EAAIM,iBACJL,KAAKV,MAAM+B,QAAX,2BAAwBrB,KAAKT,OAA7B,IAAoCW,GAAIoB,cAAUR,WAAW,KAC7Dd,KAAKG,SAAS,CAAEV,KAAM,O,mCAGXM,GACXC,KAAKG,SAAL,eACGJ,EAAIQ,OAAOC,KAAOT,EAAIQ,OAAOE,U,+BAKhC,OACE,0BAAMC,UAAU,cAAcC,SAAUX,KAAKoB,cAC3C,2BAAOG,QAAQ,QAAf,aACA,2BACEX,KAAK,OACLV,GAAG,OACHM,KAAK,OACLC,MAAOT,KAAKT,MAAME,KAClBoB,SAAUb,KAAKJ,eAGjB,iD,GAhCkBsB,cCsFXM,G,wDAnFb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEkC,MAAO,IAEtB,EAAKJ,QAAU,EAAKA,QAAQ1B,KAAb,gBACf,EAAK+B,OAAS,EAAKA,OAAO/B,KAAZ,gBACd,EAAKgC,iBAAmB,EAAKA,iBAAiBhC,KAAtB,gBANP,E,mDASZO,GACLF,KAAKG,SAAS,CACZsB,MAAOzB,KAAKT,MAAMkC,MAAMG,QAAO,SAACnC,GAAD,OAAUA,EAAKS,KAAOA,S,8BAWjDT,GACNO,KAAKG,SAAS,CACZsB,MAAM,GAAD,mBAAMzB,KAAKT,MAAMkC,OAAjB,CAAwBhC,Q,6BAI1BS,EAAI2B,GACT,IAAMC,EAAe9B,KAAKT,MAAMkC,MAAMM,KAAI,SAACC,GACzC,OAAIA,EAAK9B,KAAOA,EACP,2BAAK8B,GAAZ,IAAkBvC,KAAMoC,IAEnBG,KAEThC,KAAKG,SAAS,CACZsB,MAAOK,M,uCAIM5B,GACf,IAAM4B,EAAe9B,KAAKT,MAAMkC,MAAMM,KAAI,SAACC,GACzC,OAAIA,EAAK9B,KAAOA,EACP,2BAAK8B,GAAZ,IAAkBlB,WAAYkB,EAAKlB,YAE9BkB,KAEThC,KAAKG,SAAS,CACZsB,MAAOK,M,mCAIG,IAAD,OACX,OACE,6BACG9B,KAAKT,MAAMkC,MAAMM,KAAI,SAACE,GAAD,OACpB,kBAAC,EAAD,CACExC,KAAMwC,EAAExC,KACRyC,IAAKD,EAAE/B,GACPA,GAAI+B,EAAE/B,GACNY,UAAWmB,EAAEnB,UACbG,WAAY,kBAAM,EAAKkB,OAAOF,EAAE/B,KAChCI,WAAY,EAAKoB,OACjBzB,WAAY,EAAK0B,yB,+BAQzB,OACE,yBAAKjB,UAAU,YACb,yCACY,+DAEXV,KAAKoC,aACN,kBAAC,EAAD,CAAaf,QAASrB,KAAKqB,e,GA9EZH,cCQRmB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCGc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20786b49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editing: false,\r\n      task: this.props.task,\r\n    };\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n\r\n  handleToggle(evt) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n\r\n  toggleForm() {\r\n    this.setState({\r\n      editing: !this.state.editing,\r\n    });\r\n  }\r\n\r\n  handleUpdate(e) {\r\n    e.preventDefault();\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({\r\n      editing: false,\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let result;\r\n    if (this.state.editing) {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.task}\r\n              name=\"task\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <li\r\n            className={\r\n              this.props.completed ? \"Todo-task completed\" : \"Todo-task\"\r\n            }\r\n            onClick={this.handleToggle}\r\n          >\r\n            {this.props.task}\r\n          </li>\r\n          <div className=\"Todo-buttons\">\r\n            <button onClick={this.toggleForm}>\r\n              <i class=\"fas fa-pen\" />\r\n            </button>{\" \"}\r\n            <button onClick={this.props.removeTodo}>\r\n              <i class=\"fas fa-trash\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n\r\n/**\r\n  this.handleEdit = this.handleEdit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    handleEdit(id) {\r\n    this.editing();\r\n    this.setState({\r\n      editing: true,\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.task = this.state.edit;\r\n    this.setState({ editing: false, edit: \"\" });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  editing() {\r\n    if (this.state.editing === true) {\r\n      console.log(\"editing\");\r\n      return (\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              id=\"edit\"\r\n              name=\"edit\"\r\n              value={this.state.edit}\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n */\r\n","import React, { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.addTask({ ...this.state, id: uuidv4(), completed: false });\r\n    this.setState({ task: \"\" });\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"task\">New Task </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"task\"\r\n          name=\"task\"\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <button>Add Task</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tasks: [] };\r\n    //{ task: \"\", id: uuidv4() }\r\n    this.addTask = this.addTask.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n\r\n  remove(id) {\r\n    this.setState({\r\n      tasks: this.state.tasks.filter((task) => task.id !== id),\r\n    });\r\n  }\r\n\r\n  /*addTask(task) {\r\n    let newTask = { ...task, id: uuidv4() };\r\n    this.setState((state) => ({\r\n      tasks: [...state.tasks, newTask],\r\n    }));\r\n  }*/\r\n\r\n  addTask(task) {\r\n    this.setState({\r\n      tasks: [...this.state.tasks, task],\r\n    });\r\n  }\r\n\r\n  update(id, updatedTask) {\r\n    const updatedTodos = this.state.tasks.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({\r\n      tasks: updatedTodos,\r\n    });\r\n  }\r\n\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.tasks.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({\r\n      tasks: updatedTodos,\r\n    });\r\n  }\r\n\r\n  renderList() {\r\n    return (\r\n      <div>\r\n        {this.state.tasks.map((t) => (\r\n          <Todo\r\n            task={t.task}\r\n            key={t.id}\r\n            id={t.id}\r\n            completed={t.completed}\r\n            removeTodo={() => this.remove(t.id)}\r\n            updateTodo={this.update}\r\n            toggleTodo={this.toggleCompletion}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>\r\n          Todo List <span>A simple React Todo List App</span>\r\n        </h1>\r\n        {this.renderList()}\r\n        <NewTodoForm addTask={this.addTask} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Todo from \"./Todo\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}